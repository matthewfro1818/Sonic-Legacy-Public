# This is a basic workflow to help you get started with Actions

name: Build


# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ main, experimental ]
  pull_request:
    branches: [ main, experimental ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  buildLinux:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: latest
      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          sudo apt-get install libvlc-dev
          sudo apt-get install libvlccore-dev
          haxelib setup ~/haxelib
          haxelib install hxcpp 4.2.1 > /dev/null --quiet
          haxelib install lime 8.0.2
          haxelib install openfl 9.2.2
          haxelib install flixel 5.2.2
          haxelib install flixel-tools
          haxelib install flixel-ui
          haxelib install flixel-addons 2.10.0
          haxelib install tjson
          haxelib install hxjsonast
          haxelib install hxvlc 1.2.0
          haxelib install discord_rpc
          haxelib git linc_luajit https://github.com/Sirox228/linc_luajit.git
          haxelib install hscript 2.5.0
          haxelib git hscript-ex https://github.com/ianharrigan/hscript-ex
          haxelib git extension-androidtools https://github.com/Default-name123/oldtools.git
          haxelib install hxcpp-debug-server
          haxelib fixrepo
      - name: Skip SScript setup mode
        run: echo 'oy9:showMacroty8:loopCosti25y10:includeAllfg' >> ~/settings.cocoa
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Compile
        run: |
          haxelib fixrepo
          haxelib run lime build Project.xml linux --app-version="4.0.0-${{ github.run_id}}"
      - name: Publish Artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          name: linuxBuild
          path: 'export/release/linux/bin'
  buildWindows:
    runs-on: windows-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2.3.0

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: latest
      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          haxelib setup C:/haxelib
          haxelib install hxcpp 4.2.1 > /dev/null --quiet
          haxelib install lime 8.0.2
          haxelib install openfl 9.2.2
          haxelib install flixel 5.2.2
          haxelib install flixel-tools
          haxelib install flixel-ui
          haxelib install flixel-addons 2.10.0
          haxelib install tjson
          haxelib install hxjsonast
          haxelib install hxvlc 1.2.0
          haxelib install discord_rpc
          haxelib git linc_luajit https://github.com/Sirox228/linc_luajit.git
          haxelib install hscript 2.5.0
          haxelib git hscript-ex https://github.com/ianharrigan/hscript-ex
          haxelib git extension-androidtools https://github.com/Default-name123/oldtools.git
          haxelib install hxcpp-debug-server
          haxelib fixrepo
        shell: cmd
      - name: Skip SScript setup mode
        run: echo 'oy9:showMacroty8:loopCosti25y10:includeAllfg' >> %USERPROFILE%/settings.cocoa
        shell: cmd
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Compile
        run: haxelib run lime build windows --app-version="4.0.0-${{ github.run_id}}"
      - name: Publish Artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          name: windowsBuild
          path: export/release/windows/bin
  buildMac:
    runs-on: macos-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: latest
      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          haxelib setup ~/haxelib
          haxelib install hxcpp 4.2.1 > /dev/null --quiet
          haxelib install lime 8.0.2
          haxelib install openfl 9.2.2
          haxelib install flixel 5.2.2
          haxelib install flixel-tools
          haxelib install flixel-ui
          haxelib install flixel-addons 2.10.0
          haxelib install tjson
          haxelib install hxjsonast
          haxelib install hxvlc 1.2.0
          haxelib install discord_rpc
          haxelib git linc_luajit https://github.com/Sirox228/linc_luajit.git
          haxelib install hscript 2.5.0
          haxelib git hscript-ex https://github.com/ianharrigan/hscript-ex
          haxelib git extension-androidtools https://github.com/Default-name123/oldtools.git
          haxelib install hxcpp-debug-server
          haxelib fixrepo
      - name: Skip SScript setup mode
        run: echo 'oy9:showMacroty8:loopCosti25y10:includeAllfg' >> ~/settings.cocoa
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Compile
        run: haxelib run lime build mac --app-version="4.0.0-${{ github.run_id}}"
      - name: Publish Artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          name: macBuild
          path: export/release/macos/bin
  buildAndroid:
    runs-on: ubuntu-latest
    permissions:
        contents: write
        actions: write
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          submodules: true

      - name: Setup Android NDK
        id: setup-ndk
        uses: nttld/setup-ndk@main
        with:
          ndk-version: r21e
      - name: Setup Java JDK

        uses: actions/setup-java@main
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Setup Haxe
        uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.2.5

      - name: Installing Libraries
        run: |
          haxelib setup ~/haxelib
          haxelib install hxcpp 4.2.1 > /dev/null --quiet
          haxelib install lime 8.0.2
          haxelib install openfl 9.2.2
          haxelib install flixel 5.2.2
          haxelib install flixel-tools
          haxelib install flixel-ui
          haxelib install flixel-addons 2.10.0
          haxelib install tjson
          haxelib install hxjsonast
          haxelib install hxvlc 1.2.0
          haxelib install discord_rpc
          haxelib git linc_luajit https://github.com/Sirox228/linc_luajit.git
          haxelib install hscript 2.5.0
          haxelib git hscript-ex https://github.com/ianharrigan/hscript-ex
          haxelib git extension-androidtools https://github.com/Default-name123/oldtools.git
          haxelib install hxcpp-debug-server
          haxelib list

      - name: Configure Android
        run: |
          haxelib run lime setup -alias -y
          haxelib run lime config ANDROID_SDK $ANDROID_HOME
          haxelib run lime config ANDROID_NDK_ROOT $ANDROID_NDK_HOME
          haxelib run lime config JAVA_HOME $JAVA_HOME
          haxelib run lime config ANDROID_SETUP true
          haxelib set flixel-addons 2.10.0
          haxelib set flixel 5.2.2
          haxelib set openfl 9.2.2
          haxelib set lime 8.0.2
          haxelib set hxvlc 1.2.0
          haxelib set hxcpp 4.2.1
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}

      - name: Building
        run: haxelib run lime build android -final

      - name: Upload Artifact
        uses: actions/upload-artifact@main
        with:
          name: androidBuild
          path: export/release/android/bin/app/build/outputs/apk/debug
          if-no-files-found: warn
  Publish:
    needs: buildAndroid
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Download
        uses: actions/download-artifact@main
        with:
           name: androidBuild
           path: ${{github.workspace}}

      - name: Publish
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{secrets.GITHUB_TOKEN}}
          prerelease: false
          automatic_release_tag: 'v1.2.2'
          title: ' Android Port v1.2.2'
          files: ${{github.workspace}}/FNF Rodentrap-debug.apk
